// <auto-generated />
using System;
using EstacioneJa.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EstacioneJa.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230814142642_Relacionamentos")]
    partial class Relacionamentos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EstacioneJa.Models.OcupacaoVaga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DtFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DtInicial")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Periodo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OcupacaoVagas");
                });

            modelBuilder.Entity("EstacioneJa.Models.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emissor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormaPagamento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Receptor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pagamentos");
                });

            modelBuilder.Entity("EstacioneJa.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("VagaSensor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sensores");
                });

            modelBuilder.Entity("EstacioneJa.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Cpf")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Preferencia")
                        .HasColumnType("bit");

                    b.Property<byte[]>("SenhaHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SenhaSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cpf = 12345678912L,
                            Email = "seuEmail@gmail.com",
                            Nome = "UsuarioAdmin",
                            Preferencia = false,
                            SenhaHash = new byte[] { 127, 117, 23, 9, 51, 27, 110, 110, 135, 22, 163, 208, 154, 64, 160, 14, 247, 239, 168, 49, 112, 89, 230, 94, 198, 137, 128, 1, 152, 236, 106, 172, 11, 109, 0, 173, 144, 66, 30, 194, 116, 246, 237, 99, 134, 165, 156, 130, 145, 142, 101, 242, 127, 45, 233, 156, 168, 7, 121, 47, 102, 104, 110, 11 },
                            SenhaSalt = new byte[] { 121, 13, 255, 85, 146, 244, 53, 171, 32, 119, 64, 73, 165, 13, 41, 98, 35, 36, 67, 243, 156, 184, 211, 229, 208, 243, 5, 153, 229, 220, 189, 82, 45, 61, 93, 174, 97, 189, 129, 102, 6, 12, 201, 105, 163, 77, 197, 72, 199, 198, 208, 126, 218, 48, 130, 62, 121, 141, 186, 138, 65, 80, 227, 137, 198, 50, 237, 223, 129, 104, 119, 70, 252, 118, 146, 17, 176, 193, 2, 143, 157, 71, 134, 119, 122, 192, 60, 85, 149, 35, 164, 111, 28, 118, 241, 224, 75, 196, 62, 32, 235, 123, 22, 178, 113, 83, 18, 238, 167, 100, 14, 199, 32, 166, 104, 188, 66, 19, 49, 151, 221, 176, 121, 225, 87, 244, 101, 68 },
                            TipoUsuario = 1
                        });
                });

            modelBuilder.Entity("EstacioneJa.Models.UsuarioPagamento", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("PagamentoId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "PagamentoId");

                    b.HasIndex("PagamentoId");

                    b.ToTable("UsuarioPagamentos");
                });

            modelBuilder.Entity("EstacioneJa.Models.Vaga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Andar")
                        .HasColumnType("int");

                    b.Property<int>("Coordenada")
                        .HasColumnType("int");

                    b.Property<bool>("Disponibilidade")
                        .HasColumnType("bit");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Preferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Secao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SensorId")
                        .IsUnique();

                    b.ToTable("Vagas");
                });

            modelBuilder.Entity("EstacioneJa.Models.VagaUsuario", b =>
                {
                    b.Property<int>("VagaId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("VagaId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("VagaUsuarios");
                });

            modelBuilder.Entity("EstacioneJa.Models.Usuario", b =>
                {
                    b.HasOne("EstacioneJa.Models.Usuario", null)
                        .WithMany("Usuarios")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("EstacioneJa.Models.UsuarioPagamento", b =>
                {
                    b.HasOne("EstacioneJa.Models.Pagamento", "Pagamento")
                        .WithMany("UsuarioPagamentos")
                        .HasForeignKey("PagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstacioneJa.Models.Usuario", "Usuario")
                        .WithMany("UsuarioPagamentos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pagamento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EstacioneJa.Models.Vaga", b =>
                {
                    b.HasOne("EstacioneJa.Models.Sensor", "Sensor")
                        .WithOne("Vaga")
                        .HasForeignKey("EstacioneJa.Models.Vaga", "SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("EstacioneJa.Models.VagaUsuario", b =>
                {
                    b.HasOne("EstacioneJa.Models.Usuario", "Usuario")
                        .WithMany("VagaUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstacioneJa.Models.Vaga", "Vaga")
                        .WithMany("VagaUsuarios")
                        .HasForeignKey("VagaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("EstacioneJa.Models.Pagamento", b =>
                {
                    b.Navigation("UsuarioPagamentos");
                });

            modelBuilder.Entity("EstacioneJa.Models.Sensor", b =>
                {
                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("EstacioneJa.Models.Usuario", b =>
                {
                    b.Navigation("UsuarioPagamentos");

                    b.Navigation("Usuarios");

                    b.Navigation("VagaUsuarios");
                });

            modelBuilder.Entity("EstacioneJa.Models.Vaga", b =>
                {
                    b.Navigation("VagaUsuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
